datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

enum UserRole {
  ADMIN
  USER
}

enum ResourceType {
  LIBRARY
  TOOL
  FRAMEWORK
  TUTORIAL
  TEMPLATE
  ICON_SET
  ILLUSTRATION
  COMPONENT_LIBRARY
  CODE_SNIPPET
  API
  DOCUMENTATION
  COURSE
  OTHER
}

enum ResourceCategory {
  FRONTEND
  BACKEND
  FULLSTACK
  DEVOPS
  MOBILE
  AI_ML
  DATABASE
  SECURITY
  UI_UX
  DESIGN
  MACHINE_LEARNING
  CLOUD
  OTHER
}

enum InteractionType {
  VIEW
  LIKE
}

enum VoteType {
  UP
  DOWN
}

enum NotificationType {
  RESOURCE_LIKE
  RESOURCE_SAVE
  BLOG_VOTE
  BLOG_SAVE
  BLOG_COMMENT
}

model Resource {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  url           String
  type          ResourceType
  category      ResourceCategory
  tags          String[]
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  uniqueViews    Int            @default(0)
  totalViews     Int            @default(0)
  likes         Int             @default(0)
  saves         Int             @default(0)
  interactions  ResourceInteraction[]
  
  savedResources SavedResource[] @relation("ResourceToSavedResource")
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  reactions     ResourceReaction[]
  notifications Notification[]
}

model SavedResource {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  resourceId    String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource      Resource       @relation("ResourceToSavedResource", fields: [resourceId], references: [id], onDelete: Cascade)
  
  savedAt       DateTime       @default(now())

  @@unique([userId, resourceId])
}

model ResourceInteraction {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  resourceId    String         @db.ObjectId
  userId        String         @db.ObjectId
  type          InteractionType
  createdAt     DateTime       @default(now())

  resource      Resource       @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([resourceId, userId, type])
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  username      String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole?        @default(USER)

  // Add new profile fields
  bio             String?
  location        String?
  website         String?
  github          String?
  twitter         String?
  techStack       String?
  yearsOfExperience String?
  currentRole     String?
  company         String?
  lookingForWork  Boolean   @default(false)

  reputation Int @default(0)

  password      String?
  resetToken        String?
  resetTokenExpiry  DateTime?

  resources     Resource[]
  savedResources SavedResource[]
  interactions   ResourceInteraction[]
  reactions     ResourceReaction[]
  blogs         Blog[]
  blogLikes     BlogLike[]
  blogSaves     BlogSave[]
  comments      Comment[]
  blogVotes     BlogVote[]
  commentReactions CommentReaction[]
  blogReactions BlogReaction[]
  notifications Notification[]

  // Optional for WebAuthn support
  authenticators Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Self-referential relationships for follows
  followers    User[]   @relation("UserFollows", fields: [followerIds], references: [id])
  following    User[]   @relation("UserFollows", fields: [followingIds], references: [id])
  followerIds  String[] @db.ObjectId @default([])
  followingIds String[] @db.ObjectId @default([])

  notificationActions Notification[]  @relation("NotificationActionUser")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model ResourceReaction {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  emoji      String   
  userId     String   @db.ObjectId
  resourceId String   @db.ObjectId
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId, emoji])
  @@index([resourceId])
  @@index([userId])
}

model Blog {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String      @db.String
  summary     String?     @db.String
  slug        String      @unique
  published   Boolean     @default(false)
  coverImage  String?
  tags        String[]
  featured    Boolean     @default(false)
  
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  likes       BlogLike[]
  saves       BlogSave[]
  views       BlogView[]
  votes       BlogVote[]
  reactions   BlogReaction[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  notifications Notification[]

  @@index([userId])
}

model BlogReaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  emoji     String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blogId, userId, emoji])
  @@index([blogId])
  @@index([userId])
}

model Comment {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  content     String      @db.String
  blogId      String      @db.ObjectId
  userId      String      @db.ObjectId
  parentId    String?     @db.ObjectId
  
  blog        Blog        @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Comment?    @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[]   @relation("CommentReplies")
  reactions   CommentReaction[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  notifications Notification[]

  @@index([blogId])
  @@index([userId])
  @@index([parentId])
}

model CommentReaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  emoji     String
  userId    String   @db.ObjectId
  commentId String   @db.ObjectId
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId, emoji], name: "userId_commentId_emoji")
  @@index([commentId])
}

model BlogLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([blogId, userId])
}

model BlogSave {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([blogId, userId])
}

model BlogView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String   @db.ObjectId
  userId    String?  @db.ObjectId
  ip        String?
  createdAt DateTime @default(now())
}

model BlogVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  type      VoteType
  createdAt DateTime @default(now())

  @@unique([blogId, userId])
}

model SearchQuery {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  query     String
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())

  @@index([query])
  @@index([createdAt])
}

model Notification {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  type          NotificationType
  read          Boolean        @default(false)
  createdAt     DateTime       @default(now())
  
  // The user who will receive the notification
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // The user who performed the action
  actionUserId  String         @db.ObjectId
  actionUser    User           @relation("NotificationActionUser", fields: [actionUserId], references: [id], onDelete: Cascade)
  
  // Optional relations based on notification type
  resourceId    String?        @db.ObjectId
  resource      Resource?      @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  blogId        String?        @db.ObjectId
  blog          Blog?          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  commentId     String?        @db.ObjectId
  comment       Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([actionUserId])
  @@index([resourceId])
  @@index([blogId])
  @@index([commentId])
}