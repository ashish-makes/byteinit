datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

enum UserRole {
  ADMIN
  USER
}

enum ResourceType {
  LIBRARY
  TOOL
  FRAMEWORK
  TUTORIAL
  TEMPLATE
  OTHER
}

enum ResourceCategory {
  FRONTEND
  BACKEND
  FULLSTACK
  DEVOPS
  MOBILE
  AI_ML
  DATABASE
  SECURITY
  OTHER
}

enum InteractionType {
  VIEW
  LIKE
}

model Resource {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  url           String
  type          ResourceType
  category      ResourceCategory
  tags          String[]
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  uniqueViews    Int            @default(0)
  totalViews     Int            @default(0)
  likes         Int            @default(0)
  interactions  ResourceInteraction[]
  
  savedResources SavedResource[] @relation("ResourceToSavedResource")
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model SavedResource {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  resourceId    String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource      Resource       @relation("ResourceToSavedResource", fields: [resourceId], references: [id], onDelete: Cascade)
  
  savedAt       DateTime       @default(now())

  @@unique([userId, resourceId])
}

model ResourceInteraction {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  resourceId    String         @db.ObjectId
  userId        String         @db.ObjectId
  type          InteractionType
  createdAt     DateTime       @default(now())

  resource      Resource       @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([resourceId, userId, type])
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole?        @default(USER)

  // Add new profile fields
  bio              String?
  location         String?
  website          String?
  github           String?
  twitter          String?
  techStack        String?
  yearsOfExperience String?
  currentRole       String?
  company          String?
  lookingForWork    Boolean? @default(false)

  password      String?
  resetToken        String?
  resetTokenExpiry  DateTime?

  resources     Resource[]
  savedResources SavedResource[]
  interactions   ResourceInteraction[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}